To implement the export to Excel functionality while maintaining the order of the display (parent header, parent data, child header, child data), you can use a JavaScript library like SheetJS (js-xlsx) to generate the Excel file. Here's the modified code with the export functionality:Below is a basic implementation of the described use case using JavaScript. This includes creating an expandable datatable, searching and selecting parent rows, and exporting selected rows and their child rows to Excel in the specified order:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Expandable Datatable</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
</head>
<body>
    <input type="text" id="searchInput" placeholder="Search parent rows...">
    <table id="dataTable">
        <!-- Table headers will be generated dynamically -->
    </table>
    <button onclick="exportToExcel()">Export to Excel</button>

    <script>
        // Sample data
        const parentData = [
            { id: 1, name: "Parent 1" },
            { id: 2, name: "Parent 2" },
            { id: 3, name: "Parent 3" }
        ];

        const childData = [
            { parentId: 1, childName: "Child 1-1" },
            { parentId: 1, childName: "Child 1-2" },
            { parentId: 2, childName: "Child 2-1" },
            { parentId: 3, childName: "Child 3-1" }
        ];

        // Function to render table
        function renderTable() {
            const table = document.getElementById('dataTable');
            const headerRow = table.createTHead().insertRow();
            headerRow.insertCell().textContent = 'Parent ID';
            headerRow.insertCell().textContent = 'Parent Name';
            headerRow.insertCell().textContent = 'Select';

            parentData.forEach(parent => {
                const row = table.insertRow();
                row.insertCell().textContent = parent.id;
                row.insertCell().textContent = parent.name;
                const checkboxCell = row.insertCell();
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.dataset.parentId = parent.id;
                checkboxCell.appendChild(checkbox);
            });

            document.getElementById('searchInput').addEventListener('input', searchParentRows);
        }

        // Function to search parent rows
        function searchParentRows() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const table = document.getElementById('dataTable');
            const rows = table.getElementsByTagName('tr');
            Array.from(rows).forEach(row => {
                const cells = row.getElementsByTagName('td');
                if (cells.length > 0) {
                    const parentName = cells[1].textContent.toLowerCase();
                    row.style.display = parentName.includes(searchText) ? '' : 'none';
                }
            });
        }

        // Function to export selected rows and their child rows to Excel
        function exportToExcel() {
            const selectedParentIds = [];
            const selectedRows = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'));
            const exportData = [];

            selectedRows.forEach(row => {
                selectedParentIds.push(row.dataset.parentId);
                const parentId = parseInt(row.dataset.parentId);
                const parent = parentData.find(p => p.id === parentId);
                exportData.push({ 'Parent ID': parent.id, 'Parent Name': parent.name });

                const children = childData.filter(child => child.parentId === parentId);
                children.forEach(child => {
                    exportData.push({ 'Child Name': child.childName });
                });
            });

            const ws = XLSX.utils.json_to_sheet(exportData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Data');
            XLSX.writeFile(wb, 'exported_data.xlsx');
        }

        // Initialize table
        renderTable();
    </script>
</body>
</html>
```

This code creates a basic HTML table with parent rows and checkboxes for selection. You can search for parent rows using the search box. When exporting to Excel, it collects selected parent rows along with their child rows and exports them in the specified order.
