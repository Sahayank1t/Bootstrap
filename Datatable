Here's a basic implementation of the described use case using JavaScript:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Datatable</title>
  <style>
    /* Add your CSS styles here */
  </style>
</head>
<body>
  <input type="text" id="searchInput" placeholder="Search...">
  <button onclick="exportToExcel()">Export to Excel</button>
  <table id="datatable">
    <thead>
      <tr>
        <th>Select</th>
        <th>Parent Column 1</th>
        <th>Parent Column 2</th>
      </tr>
    </thead>
    <tbody id="tableBody">
      <!-- Table rows will be dynamically generated here -->
    </tbody>
  </table>

  <script>
    // Sample data arrays
    const parentData = [
      { id: 1, column1: 'Parent 1-1', column2: 'Parent 1-2' },
      { id: 2, column1: 'Parent 2-1', column2: 'Parent 2-2' },
      // Add more parent data as needed
    ];

    const childData = [
      { parentId: 1, childColumn1: 'Child 1-1', childColumn2: 'Child 1-2' },
      { parentId: 1, childColumn1: 'Child 1-3', childColumn2: 'Child 1-4' },
      { parentId: 2, childColumn1: 'Child 2-1', childColumn2: 'Child 2-2' },
      // Add more child data as needed
    ];

    // Function to render the table
    function renderTable() {
      const tableBody = document.getElementById('tableBody');
      tableBody.innerHTML = '';
      
      parentData.forEach(parent => {
        const parentRow = `
          <tr>
            <td><input type="checkbox" value="${parent.id}" onchange="updateExportData(this)"></td>
            <td>${parent.column1}</td>
            <td>${parent.column2}</td>
          </tr>
        `;
        tableBody.innerHTML += parentRow;

        const childRows = childData.filter(child => child.parentId === parent.id);
        childRows.forEach(child => {
          const childRow = `
            <tr class="child-row">
              <td></td>
              <td>${child.childColumn1}</td>
              <td>${child.childColumn2}</td>
            </tr>
          `;
          tableBody.innerHTML += childRow;
        });
      });
    }

    // Function to filter table rows based on search input
    function filterTable() {
      const searchInput = document.getElementById('searchInput').value.toLowerCase();
      const rows = document.querySelectorAll('#datatable tbody tr');

      rows.forEach(row => {
        const isVisible = Array.from(row.children).some(cell => cell.textContent.toLowerCase().includes(searchInput));
        row.style.display = isVisible ? '' : 'none';
      });
    }

    // Function to track selected rows for export
    let exportData = [];

    function updateExportData(checkbox) {
      const id = parseInt(checkbox.value);
      if (checkbox.checked) {
        exportData.push(id);
      } else {
        const index = exportData.indexOf(id);
        if (index !== -1) {
          exportData.splice(index, 1);
        }
      }
    }

    // Function to export selected rows and their child rows to Excel (dummy implementation)
    function exportToExcel() {
      const selectedRows = parentData.filter(parent => exportData.includes(parent.id));
      const selectedChildRows = childData.filter(child => exportData.includes(child.parentId));
      
      // Dummy export functionality (replace with your actual export logic)
      console.log('Selected Rows:', selectedRows);
      console.log('Selected Child Rows:', selectedChildRows);
    }

    // Initial rendering
    renderTable();

    // Event listeners
    document.getElementById('searchInput').addEventListener('input', filterTable);
  </script>
</body>
</html>
```

This code sets up a basic HTML page with a table that displays parent rows and their corresponding child rows in an expandable format. It includes functionality for searching, selecting rows for export, and exporting the selected rows and their child rows to Excel (dummy implementation). You can customize the styling and export functionality as needed. => {

