To implement the export to Excel functionality while maintaining the order of the display (parent header, parent data, child header, child data), you can use a JavaScript library like SheetJS (js-xlsx) to generate the Excel file. Here's the modified code with the export functionality:

```html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Expandable DataTable</title>
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
</head>
<body>
<h1>Expandable DataTable</h1>
<input type="text" id="searchInput" placeholder="Search parent rows">
<table id="dataTable" class="display">
  <thead>
    <tr>
      <th>Select</th>
      <th>Parent ID</th>
      <th>Parent Data</th>
      <th>Child Data</th>
    </tr>
  </thead>
  <tbody>
    <!-- Table body will be populated dynamically -->
  </tbody>
</table>
<button id="exportBtn">Export to Excel</button>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.0/xlsx.full.min.js"></script>
<script>
$(document).ready(function() {
  var parentData = [
    { id: 1, parentData: "Parent 1" },
    { id: 2, parentData: "Parent 2" },
    // Add more parent data as needed
  ];

  var childData = [
    { parentId: 1, childData: "Child 1 of Parent 1" },
    { parentId: 1, childData: "Child 2 of Parent 1" },
    { parentId: 2, childData: "Child 1 of Parent 2" },
    // Add more child data as needed
  ];

  var dataTable = $('#dataTable').DataTable({
    data: parentData,
    columns: [
      { data: null, render: function(data, type, row) {
          return '<input type="checkbox" value="' + row.id + '">';
        }
      },
      { data: 'id' },
      { data: 'parentData' },
      { data: null, render: function(data, type, row) {
          var children = childData.filter(function(child) {
            return child.parentId === row.id;
          });
          return children.map(function(child) {
            return child.childData;
          }).join('<br>');
        }
      }
    ]
  });

  $('#searchInput').on('keyup', function() {
    dataTable.search(this.value).draw();
  });

  $('#exportBtn').on('click', function() {
    var selectedRows = dataTable.rows('.selected').data().toArray();
    exportToExcel(selectedRows);
  });

  $('#dataTable tbody').on('click', 'input[type="checkbox"]', function() {
    var $row = $(this).closest('tr');
    if (this.checked) {
      $row.addClass('selected');
    } else {
      $row.removeClass('selected');
    }
  });

  function exportToExcel(data) {
    var wb = XLSX.utils.book_new();
    var ws = XLSX.utils.json_to_sheet(data.map(function(row) {
      return {
        "Parent ID": row.id,
        "Parent Data": row.parentData,
        "Child Data": row.childData.split("<br>").join("\n") // Split child data by <br> and join with newlines
      };
    }));
    XLSX.utils.book_append_sheet(wb, ws, "Data");
    var fileName = "export.xlsx";
    XLSX.writeFile(wb, fileName);
  }
});
</script>
</body>
</html>
```

This code exports the selected rows and their child rows to an Excel file while maintaining the order of display as described. It splits child data by `<br>` and joins with newlines to maintain the format in Excel.
