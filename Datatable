<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Expandable Datatable</title>
  <style>
    table {
      border-collapse: collapse;
      width: 100%;
    }
    th, td {
      padding: 8px;
      border: 1px solid #ddd;
    }
    .child-row {
      background-color: #f2f2f2;
      indent: 10px;
    }
  </style>
</head>
<body>
  <h1>Expandable Datatable</h1>
  <input type="text" id="search-box" placeholder="Search">
  <button id="export-btn">Export to Excel</button>
  <table id="data-table">
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Expand</th>
        <th>Select</th>
      </tr>
    </thead>
    </table>
  <script src="script.js"></script>
</body>
</html>


const dataTable = document.getElementById('data-table');

// Define data structures
const parentData = [
  { id: 1, name: 'Parent 1', description: 'This is parent 1 description' },
  { id: 2, name: 'Parent 2', description: 'This is parent 2 description' },
  { id: 3, name: 'Parent 3', description: 'This is parent 3 description' },
];

const childData = [
  { id: 1, parentId: 1, details: 'Child details for Parent 1' },
  { id: 2, parentId: 1, details: 'Another child for Parent 1' },
  { id: 3, parentId: 2, details: 'Child details for Parent 2' },
  { id: 4, parentId: 3, details: 'Child 1 of Parent 3' },
  { id: 5, parentId: 3, details: 'Child 2 of Parent 3' },
];

// Function to join parent and child data
function joinData(parentArr, childArr) {
  return parentArr.map(parent => {
    const children = childArr.filter(child => child.parentId === parent.id);
    return { ...parent, children };
  });
}

// Prepare data with joined children
const data = joinData(parentData, childData);

// Function to render table rows
function renderRow(row) {
  const tr = document.createElement('tr');
  tr.classList.add(row.children ? 'parent-row' : 'child-row');
  tr.innerHTML = `
    <td><span class="math-inline">\{row\.name ? row\.name \: ''\}</td\>
<td\></span>{row.description ? row.description : ''}</td>
    <td>
      ${row.children ? `<button class="toggle-btn">Expand</button>` : ''}
    </td>
    <td>
      <input type="checkbox" class="row-checkbox">
    </td>
  `;

  // Add click event listener for expand/collapse toggle
  if (row.children) {
    tr.querySelector('.toggle-btn').addEventListener('click', () => {
      const children = row.children;
      if (children.length) {
        const childRows = children.map(renderChildRow);
        const nextRow = tr.nextElementSibling;
        if (nextRow && nextRow.classList.contains('child-row')) {
          nextRow.remove(); // Collapse existing child rows
        } else {
          tr.after(...childRows); // Expand and insert child rows
        }
        tr.querySelector('.toggle-btn').textContent = children.length ? 'Collapse' : 'Expand';
      }
    });
  }

  return tr;
}

// Render initial table body
const tbody = document.createElement('tbody');
data.forEach(row => tbody.appendChild(renderRow(row)));
dataTable.appendChild(tbody);

// Datatable functionalities

// Enable searching
const searchInput = document.getElementById('search-box');
searchInput.addEventListener('keyup', () => {
